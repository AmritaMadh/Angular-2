Directive: 
Angular Directives enhance the capability of HTML elements by attaching custom behaviors to the DOM.

Types:
- Attribute Directives
- Structural Directives
- Components

Attribute Directives:
Attribute Directives are responsible for manipulating the appearance and behavior of DOM elements. We can use attribute directives to change the style of DOM elements. These 
directives are also used to hide or show particular DOM elements conditionally. Angular provides many built-in Attribute Directives like NgStyle, NgClass, etc. We can also create
our own custom Attribute Directives for our desired functionality.

Structural Directives:
Structural Directives are responsible for changing the structure of the DOM. They work by adding or removing the elements from the DOM, unlike Attribute Directives which just 
change the element’s appearance and behavior.

You can easily differentiate between the Structural and Attribute Directive by looking at the syntax. The Structural Directive’s name always starts with an asterisk(*) prefix, 
whereas Attribute Directive does not contain any prefix. The three most popular built-in Structural Directives Angular provides are NgIf, NgFor, and NgSwitch.

Components:
Components are directives with templates. The only difference between Components and the other two types of directives is the Template. Attribute and Structural Directives don't 
have Templates. So, we can say that the Component is a cleaner version of the Directive with a template, which is easier to use.

There are two other kinds of Angular directives, described extensively elsewhere: (1) components and (2) attribute directives.
A component manages a region of HTML in the manner of a native HTML element. Technically it's a directive with a template.
An attribute directive changes the appearance or behavior of an element, component, or another directive. For example, the built-in NgStyle directive changes several element styles at the same time.
You can apply many attribute directives to one host element. You can only apply one structural directive to a host element.

https://angular.io/guide/structural-directives


https://www.freecodecamp.org/news/angular-directives-learn-how-to-use-or-create-custom-directives-in-angular-c9b133c24442/

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ElementRef:
ElementRef which is responsible for accessing the DOM element.
The ElemementRef is a class which can wrap around a specified DOM element to enhance its properties and methods available on a native element.

HostListener:
The @HostListener decorator lets you subscribe to events of the DOM element that hosts an attribute directive, the <p> in this case.

Of course you could reach into the DOM with standard JavaScript and attach event listeners manually. There are at least three problems with that approach:
You have to write the listeners correctly.
The code must detach the listener when the directive is destroyed to avoid memory leaks.
Talking to DOM API directly isn't a best practice.

